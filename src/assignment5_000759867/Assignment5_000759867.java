package assignment5_000759867;


import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;
import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import javafx.util.Duration;
import javax.swing.JOptionPane;

/***********************************
 * **********UML DIAGRAM************
 * *********************************
 * -static int trueAnswer          *
 * -TextField textfield1           *
 * -Label userName                 *
 * -Final integer STARTTIME 150    *
 * -Timeline timeline              *
 * -IntegerProperty timeSeconds    *
 * -Random ran                     *
 * Task task                       *
 * *********************************
 * +void start(Stage stage)        *
 * +static void main(String args[])*
 * *********************************
 */

/**
 * This program contains Quiz code, In which user asked to input a answers of a randomly question generated by program.
 * 
 * @author CHIRAG BARANDA - 000759867
 */
public class Assignment5_000759867 extends Application {
        private static int trueAnswer =0 ,falseAnswer = 0; //variables to store the count for the true and false answer
        private TextField textField1; //textfield object to take input from the user
        private Label userName,clock,datelabel, Mathematics_Quiz, rightAnswers, WrongAnswers,firstInput,secondInput, plus,equal,emptyInput; //labels to show on the application
        private static final Integer STARTTIME = 150; // start time for clock timer
        private Timeline timeline; //timeline object to run in clock
        private IntegerProperty timeSeconds = new SimpleIntegerProperty(STARTTIME); //initilize integerProperty object for clock countdown
        Random ran = new Random(); //initialize the object for random
         
        final Task task = new Task<Void>() //logic for the countdown clock in the application
        {
        @Override
        protected Void call() throws Exception {
            //Countdown code here
            if (timeline != null) {
                    timeline.stop();
                }
                timeSeconds.set(STARTTIME);
                timeline = new Timeline();
                timeline.getKeyFrames().add(
                        new KeyFrame(Duration.seconds(STARTTIME+1),
                        new KeyValue(timeSeconds, 0)));
                timeline.playFromStart();
            
            return null;
        }
    };
        
        private void display(ActionEvent e) //method to display the right and wrong answer plus generating the new question using random fucntion
        {
            new Thread(task).start(); //start the timer when it's clicked te button "ok"
            int sub1, sub2, add=0; //initialize the local varible to calculate the sum from the text field
                                
				
                                if (textField1.getText().equals("")) //checks if the textfield is empty or not
                                { 
                                    emptyInput.setText("Empty Input, Please enter answer!"); //if textfield is empty set this string as a output display
                                }
                                else
                                {
                                    sub1 = Integer.parseInt(firstInput.getText()); //fetching the value from the first label
                                    sub2 = Integer.parseInt(secondInput.getText()); //fetching the value from the second label
                                    add = sub1 + sub2; //adding those two fetched values
                                    if(add == Integer.parseInt(textField1.getText())) //checking the sum of fetched values
                                {
					trueAnswer++; //increase in the trueAnswer count if sum is true of fetched value
				}else{
					falseAnswer++; //otherwise Increase the falseAnser count
				}
				textField1.setText(""); //setting the text field empty for user to get next input
				rightAnswers.setText("Right : "+Integer.toString(trueAnswer)); //showing the numbers of count of true answer on display
				WrongAnswers.setText("Wrong : "+Integer.toString(falseAnswer)); //showing the numbers of count of false answer on display
                                emptyInput.setText(""); //setting tht label as empty string
                                }
				
				
				firstInput.setText(Integer.toString(1 + (int)(Math.random() * 10))); //generate and set the random number for first label-1 value
				secondInput.setText(Integer.toString(1 + (int)(Math.random() * 10))); //generate and set the random number for first label-2 value
                                
                                
        }
        
        private void reset(ActionEvent e) //method to reset all varialbes plus generating the new question using random fucntion
        {
                                textField1.setText(""); //setting the text field empty for user to get next input
                                emptyInput.setText(""); //setting tht label as empty string
				rightAnswers.setText("Right : "+ Integer.toString(0)); //showing the numbers of count to 0 for true answer on display
				WrongAnswers.setText("Wrong : "+Integer.toString(0)); //showing the numbers of count 0 for false answer on display
				firstInput.setText(Integer.toString(1 + (int)(Math.random() * 10))); //generate and set the random number for first label-1 value
				secondInput.setText(Integer.toString(1 + (int)(Math.random() * 10))); //generate and set the random number for first label-2 value
			
        }
        
        
        
                
    // TODO: Instance Variables for View Components and Model
    // TODO: Private Event Handlers and Helper Methods
    /**
     * This is where you create your components and the model and add event
     * handlers.
     *
     * @param stage The main stage
     * @throws Exception
     */
    @Override
    public void start(Stage stage) throws Exception 
    {
        Pane root = new Pane();
        Scene scene = new Scene(root, 400, 225); // set the size here
        stage.setTitle("Mathematics quiz"); // set the window title here
        stage.setScene(scene);
        
        // TODO: Add your GUI-building code here

        // 1. Create the model
        
        String name = JOptionPane.showInputDialog("Hello use Enter your Name to start Quiz!");
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Date date = new Date();
        
        
        
        
        
        // 2. Create the GUI components
        Button ok = new Button(" OK "); //initialize the OK button
        Button reset = new Button(" Reset "); //initialize the RESET button
        textField1 = new  TextField(); //initialize the text field
        clock = new Label("Clock : "); //initialize the label clock
        datelabel = new Label("Quiz start Time : "+dateFormat.format(date)); //initialize the label date
        emptyInput = new Label(""); //initialize the label emptyInput
        userName = new Label("HI ,"+name); //initialize the label username
        userName.setFont(new Font("System", 20)); //setting the font stlye and size
        Mathematics_Quiz = new Label("Mathematics quiz"); //initialize the arithmetic quiz
        rightAnswers = new Label("Right : ");//initialize the label right
        WrongAnswers = new Label("Wrong : "); //initialize the wronganswer
        firstInput = new Label(Integer.toString(ran.nextInt(10))); //initialize the label firstinput; generating the random number
        secondInput = new Label(Integer.toString(ran.nextInt(10)));  //initialize the label ;  generating the random number
        plus = new Label(" + "); //initialize the label plus
        equal = new Label(" = "); //initialize the label equal
        Mathematics_Quiz.setFont(new Font("System", 25)); //setting the font stlye and size
        
        // 3. Add components to the root
       root.getChildren().add(ok);
       root.getChildren().add(reset);
       root.getChildren().add(textField1);
       root.getChildren().add(clock);       
       root.getChildren().add(datelabel);       
       root.getChildren().add(Mathematics_Quiz);       
       root.getChildren().add(rightAnswers);       
       root.getChildren().add(WrongAnswers);       
       root.getChildren().add(firstInput);       
       root.getChildren().add(secondInput);       
       root.getChildren().add(plus);       
       root.getChildren().add(equal);       
       root.getChildren().add(emptyInput);       
       root.getChildren().add(userName);       
        // 4. Configure the components (colors, fonts, size, location)
        ok.setLayoutY(105);
        ok.setLayoutX(250);
        
        reset.setLayoutX(320);
        reset.setLayoutY(105);
        
        userName.setLayoutX(0);
        userName.setLayoutY(0);
        userName.setTextFill(Color.CORNFLOWERBLUE);
        
        textField1.setLayoutY(105);        
        textField1.setLayoutX(180);       
        textField1.setPrefWidth(50);
        
        clock.setLayoutX(280);
        clock.setLayoutY(65);
        clock.textProperty().bind(timeSeconds.asString());
        clock.setTextFill(Color.RED);
        
        datelabel.setLayoutX(180);
        datelabel.setLayoutY(200);
        datelabel.setTextFill(Color.BLACK);
        
        
        emptyInput.setLayoutX(80);
        emptyInput.setLayoutY(150);
        emptyInput.setTextFill(Color.YELLOWGREEN);
        
        firstInput.setLayoutX(75);
        firstInput.setLayoutY(105);
        
        Mathematics_Quiz.setLayoutX(50);
        Mathematics_Quiz.setLayoutY(40);
        Mathematics_Quiz.setTextFill(Color.CHOCOLATE);
        
        plus.setLayoutX(100);
        plus.setLayoutY(105);
        
        equal.setLayoutX(145);
        equal.setLayoutY(105);
        
        secondInput.setLayoutX(125);
        secondInput.setLayoutY(105);
       
        rightAnswers.setLayoutX(280);
        rightAnswers.setLayoutY(25);
        
        WrongAnswers.setLayoutX(280);
        WrongAnswers.setLayoutY(45);
        // 5. Add Event Handlers and do final setup
        ok.setOnAction(this::display); 
        
        reset.setOnAction(this::reset);
       
        
        
        
                
        // 6. Show the stage
        stage.show();
    }

    /**
     * Make no changes here.
     *
     * @param args unused
     */
    public static void main(String[] args) 
    {
        launch(args);
    }
}
